Sat Apr 13 19:49:47 PDT 2024
Linux csslab13 4.18.0-513.18.1.el8_9.x86_64 #1 SMP Wed Feb 21 21:34:36 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
uid=1261876(siyuanc) gid=2121261876(siyuanc) groups=2121261876(siyuanc),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Original Tree: 1 
New Tree: 1 

Original Tree: 2 1 3 4 
New Tree: 1 3 

=====================================================
3. clang-tidy warnings are fixed
=====================================================
12572 warnings generated.
27086 warnings generated.
Suppressed 27100 warnings (27086 in non-user code, 14 NOLINT).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./threadedBST.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==592903== Memcheck, a memory error detector
==592903== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==592903== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==592903== Command: ./a.out
==592903== Parent PID: 592838
==592903== 
==592903== 
==592903== HEAP SUMMARY:
==592903==     in use at exit: 0 bytes in 0 blocks
==592903==   total heap usage: 38 allocs, 38 frees, 77,424 bytes allocated
==592903== 
==592903== All heap blocks were freed -- no leaks are possible
==592903== 
==592903== For lists of detected and suppressed errors, rerun with: -s
==592903== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/siyuanc/343/TBST/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------
test1()                           4       2  50.00%        10       2  80.00%         2       1  50.00%
test2()                           4       0 100.00%        10       0 100.00%         2       0 100.00%
main                              1       0 100.00%         5       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------
TOTAL                             9       2  77.78%        25       2  92.00%         4       1  75.00%

File '/home/NETID/siyuanc/343/TBST/threadedBST.cpp':
Name                                                                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, ThreadedBST const&)                                             4       0 100.00%         7       0 100.00%         2       0 100.00%
ThreadedBST::operator==(ThreadedBST const&) const                                        10      10   0.00%        12      12   0.00%         6       6   0.00%
ThreadedBST::operator=(ThreadedBST const&)                                                4       4   0.00%         7       7   0.00%         2       2   0.00%
ThreadedBST::ThreadedBST(int)                                                             6       0 100.00%        15       0 100.00%         4       0 100.00%
ThreadedBST::balanceInorder(Node*, std::vector<Node*, std::allocator<Node*>>&)            6       0 100.00%        11       0 100.00%         4       0 100.00%
ThreadedBST::buildTree(int, int, std::vector<Node*, std::allocator<Node*>>&)              4       0 100.00%        11       0 100.00%         2       0 100.00%
ThreadedBST::threadTree(Node*)                                                           13       2  84.62%        21       3  85.71%        10       2  80.00%
ThreadedBST::buildSubTree(std::vector<int, std::allocator<int>> const&, int, int)         6       0 100.00%        14       0 100.00%         4       0 100.00%
ThreadedBST::addNode(Node*, int)                                                          7       1  85.71%        11       1  90.91%         4       1  75.00%
ThreadedBST::ThreadedBST(ThreadedBST const&)                                              8       0 100.00%        17       0 100.00%         6       0 100.00%
ThreadedBST::~ThreadedBST()                                                               1       0 100.00%         1       0 100.00%         0       0   0.00%
ThreadedBST::clear(Node*)                                                                10       1  90.00%        12       2  83.33%         8       1  87.50%
ThreadedBST::getEntry(int) const                                                         10       1  90.00%        13       1  92.31%         6       1  83.33%
ThreadedBST::isEmpty() const                                                              1       1   0.00%         1       1   0.00%         0       0   0.00%
ThreadedBST::inorderTraversal() const                                                     1       0 100.00%         5       0 100.00%         0       0   0.00%
ThreadedBST::inOrder(Node*, std::vector<int, std::allocator<int>>&) const                 6       0 100.00%        10       0 100.00%         4       0 100.00%
ThreadedBST::preorderTraversal() const                                                    1       0 100.00%         5       0 100.00%         0       0   0.00%
ThreadedBST::preOrder(Node*, std::vector<int, std::allocator<int>>&) const                6       0 100.00%         9       0 100.00%         4       0 100.00%
ThreadedBST::postorderTraversal() const                                                   1       1   0.00%         5       5   0.00%         0       0   0.00%
ThreadedBST::postOrder(Node*, std::vector<int, std::allocator<int>>&) const               6       6   0.00%         9       9   0.00%         4       4   0.00%
ThreadedBST::remove(int)                                                                  1       0 100.00%         8       0 100.00%         0       0   0.00%
ThreadedBST::removeHelper(Node*, int)                                                    22       3  86.36%        27       8  70.37%        16       6  62.50%
ThreadedBST::seekLeftmost(Node*)                                                          7       2  71.43%         9       3  66.67%         4       2  50.00%
ThreadedBST::checkBalance(Node*)                                                          4       0 100.00%         7       0 100.00%         2       0 100.00%
ThreadedBST::checkBalance()                                                               1       0 100.00%         5       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                   146      32  78.08%       252      52  79.37%        92      25  72.83%
=====================================================
The lines below were never executed
=====================================================
   19|      0|    new_tree.remove(i);
   20|      0|  }
   23|      0|bool ThreadedBST::operator==(const ThreadedBST &bst) const {
   24|      0|  vector<int> v = inorderTraversal();
   25|      0|  vector<int> b = bst.inorderTraversal();
   26|      0|  if (v.size() != b.size())
   27|      0|    return false;
   28|      0|  for (int i = 0; i < v.size(); i++) {
   29|      0|    if (v[i] != b[i]) {
   30|      0|      return false;
   31|      0|    }
   32|      0|  }
   33|      0|  return true;
   34|      0|}
   37|      0|ThreadedBST &ThreadedBST::operator=(const ThreadedBST &bst) {
   38|      0|  if (*this == bst) {
   39|      0|    return *this;
   40|      0|  }
   41|      0|  *this = bst;
   43|      0|  return *this;
   44|      0|}
  106|      0|    current_node = current_node->rightPtr;
  107|      0|  }
  120|      0|      current_node = current_node->leftPtr;
  155|      0|    root->leftPtr = addNode(root->leftPtr, value);
  190|      0|    return;
  191|      0|  }
  214|      0|  return nullptr;
  218|      0|bool ThreadedBST::isEmpty() const { return (headPtr == nullptr); }
  260|      0|vector<int> ThreadedBST::postorderTraversal() const {
  261|      0|  vector<int> v;
  262|      0|  postOrder(headPtr, v);
  263|      0|  return v;
  264|      0|}
  268|      0|void ThreadedBST::postOrder(Node *root, vector<int> &v) const {
  269|      0|  if (!root)
  270|      0|    return;
  271|      0|  postOrder(root->leftPtr, v);
  272|      0|  if (!root->isThread) {
  273|      0|    postOrder(root->rightPtr, v);
  274|      0|  }
  275|      0|  v.push_back(root->value);
  276|      0|}
  296|      0|    return node;
  297|      0|  }
  301|      0|    node->leftPtr = removeHelper(node->leftPtr, value);
  316|      0|    else {
  317|      0|      Node *temp = node;
  318|      0|      node = node->leftPtr;
  319|      0|      delete temp;
  320|      0|    }
  329|      0|    return nullptr;
  330|      0|  }
  334|      0|  return seekLeftmost(node->leftPtr);
Sat Apr 13 19:49:55 PDT 2024
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
